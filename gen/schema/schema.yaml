---
name: str() # Name of the resource
bulk_name: str(required=False) # Name of the bulk resource
no_data_source: bool(required=False) # Set to true if no data source should be created
no_resource: bool(required=False) # Set to true if no resource should be created
bulk_data_source: bool(required=False) # Set to true if a bulk GET operation is supported and a corresponding data source should be added
rest_endpoint: str(required=False) # REST endpoint path
spec_endpoint: str(required=False) # this is the endpoint path from the OpenAPI spec in order to generate the definition
put_create: bool(required=False) # Set to true if the PUT request is used for create
get_from_all: bool(required=False) # Set to true if GET does not support querying individual objects
no_update: bool(required=False) # Set to true if the PUT request is not supported
no_delete: bool(required=False) # Set to true if the DELETE request is not supported
no_import: bool(required=False) # Set to true if the resource does not support importing
no_read: bool(required=False) # Set to true if the resource does not support reading (GET)
data_source_name_query: bool(required=False) # Set to true if the data source supports name queries
minimum_version: str(required=False) # Define a minimum supported version
ds_description: str(required=False) # Define a data source description
res_description: str(required=False) # Define a resource description
doc_category: str(required=False) # Define a documentation category
skip_minimum_test: bool(required=False) # Do not perform a "minimum" (only mandatory attributes) test
test_tags: list(str(), required=False) # List of test tags, tests are only executed if an environment variable with for each of these tags is configured
test_variables: list(str(), required=False) # List of Terraform test variables, which need to be configured as env vars (TF_VAR_<var_name>)
test_prerequisites: str(required=False) # HCL code that is included in the acceptance tests to define prerequisites
id_name: str(required=False) # the identifier field name of the resource as seen in the request body
early_access: bool(required=False) # indicates this is using an early access API endpoint
attributes: list(include('attribute'), required=False) # List of attributes
ignore_attributes: list(str(), required=False) # List of attribute paths (example: routing.ospf.areaId) to ignore when re-generating the definition
---
attribute:
  model_name: str(required=False) # Name of the attribute in the model (payload)
  tf_name: str(required=False) # Name of the attribute in the Terraform resource, by default derived from model_name
  type: enum('String', 'Int64', 'Float64', 'Bool', 'List', 'Map', 'Set', required=False) # Type of the attribute
  element_type: enum('String', 'Int64', required=False) # only relevant if type is either 'List' or 'Set'
  data_path: list(str(), required=False) # Path to the attribute in the model structure
  id: bool(required=False) # Set to true if the attribute is part of the ID
  reference: bool(required=False) # Set to true if the attribute is a reference being used in the path (URL) of the REST endpoint
  requires_replace: bool(required=False) # Set to true if the attribute update forces Terraform to destroy/recreate the entire resource
  mandatory: bool(required=False) # Set to true if the attribute is mandatory
  write_only: bool(required=False) # Set to true if the attribute is write-only, meaning we cannot read the value
  write_changes_only: bool(required=False) # Set to true if the attribute should only be written (included in PUT payload) if it has changed
  exclude_test: bool(required=False) # Exclude attribute from example (documentation) and acceptance test
  exclude_example: bool(required=False) # Exclude attribute from acceptance test only (example/documentation is still generated)
  allow_import_changes: bool(required=False) # Allow changes to the attribute during import
  description: str(required=False) # Attribute description
  example: any(str(), int(), bool(), required=False) # Example value for documentation, also used for acceptance test
  map_key_example: str(required=False) # Example value of the map key, only relevant if type is "Map"
  enum_values: list(str(), required=False) # List of enum values, only relevant if type is "String". Null value is instead governed by `mandatory`, never include null here
  min_list: int(required=False) # Minimum number of elements in a list, only relevant if type is "List"
  max_list: int(required=False) # Maximum number of elements in a list, only relevant if type is "List"
  min_int: int(required=False) # Minimum value of an integer, only relevant if type is "Int64"
  max_int: int(required=False) # Maximum value of an integer, only relevant if type is "Int64"
  min_float: num(required=False) # Minimum value of a float, only relevant if type is "Float"
  max_float: num(required=False) # Maximum value of a float, only relevant if type is "Float"
  ordered_list: bool(required=False) # Treat `type: List` as strictly ordered. If API ever returns different order, destroy and re-create elements.
  string_patterns: list(str(), required=False) # List of regular expressions that the string must match, only relevant if type is "String"
  string_min_length: int(required=False) # Minimum length of a string, only relevant if type is "String"
  string_max_length: int(required=False) # Maximum length of a string, only relevant if type is "String"
  computed: bool(required=False) # Defines field as read-only (computed) with value derived from the API
  default_value: any(str(), int(), bool(), required=False) # Default value for the attribute
  value: any(str(), int(), bool(), required=False) # Hardcoded value for the attribute
  test_value: str(required=False) # Value used for acceptance test
  minimum_test_value: str(required=False) # Value used for "minimum" resource acceptance test
  test_tags: list(str(), required=False) # List of test tags, attribute is only included in acceptance tests if an environment variable with one of these tags is configured
  attributes: list(include('attribute'), required=False) # List of attributes, only relevant if type is "List" or "Set"
