# Modify Delete() to support 'force' parameter
name: Network Group Policy
spec_endpoint: /networks/{networkId}/groupPolicies/{groupPolicyId}
rest_endpoint: /networks/%v/groupPolicies
bulk_data_source: true
bulk_resource: true
id_name: groupPolicyId
data_source_name_query: true
doc_category: Networks
test_variables: [test_org, test_network]
attributes:
  - tf_name: network_id
    type: String
    reference: true
    description: Network ID
    example: L_123456
    test_value: meraki_network.test.id
  - model_name: name
    type: String
    mandatory: true
    description: The name for your group policy. Required.
    example: No video streaming
  - model_name: splashAuthSettings
    type: String
    description: Whether clients bound to your policy will bypass splash authorization or behave according to the network`s rules. Can be one of `network default` or `bypass`. Only available if your network has a wireless configuration.
    example: bypass
    enum_values: [bypass, network default]
  - model_name: settings
    type: String
    data_path: [bandwidth]
    description: How bandwidth limits are enforced. Can be `network default`, `ignore` or `custom`.
    example: custom
    enum_values: [custom, ignore, network default]
  - model_name: limitDown
    tf_name: bandwidth_limit_down
    type: Int64
    data_path: [bandwidth, bandwidthLimits]
    description: The maximum download limit (integer, in Kbps). null indicates no limit
    example: "1000000"
  - model_name: limitUp
    tf_name: bandwidth_limit_up
    type: Int64
    data_path: [bandwidth, bandwidthLimits]
    description: The maximum upload limit (integer, in Kbps). null indicates no limit
    example: "1000000"
  - model_name: settings
    type: String
    data_path: [bonjourForwarding]
    description: How Bonjour rules are applied. Can be `network default`, `ignore` or `custom`.
    example: custom
    enum_values: [custom, ignore, network default]
  - model_name: rules
    type: List
    data_path: [bonjourForwarding]
    description: A list of the Bonjour forwarding rules for your group policy. If `settings` is set to `custom`, at least one rule must be specified.
    attributes:
      - model_name: description
        type: String
        description: A description for your Bonjour forwarding rule. Optional.
        example: A simple bonjour rule
      - model_name: vlanId
        type: String
        id: true
        mandatory: true
        description: The ID of the service VLAN. Required.
        example: "1"
      - model_name: services
        type: Set
        element_type: String
        mandatory: true
        description: A list of Bonjour services. At least one service must be specified. Available services are `All Services`, `AirPlay`, `AFP`, `BitTorrent`, `FTP`, `iChat`, `iTunes`, `Printers`, `Samba`, `Scanners` and `SSH`
        example: All Services
  - model_name: settings
    type: String
    data_path: [contentFiltering, allowedUrlPatterns]
    exclude_test: true
    description: How URL patterns are applied. Can be `network default`, `append` or `override`.
    example: network default
    enum_values: [append, network default, override]
  - model_name: patterns
    tf_name: content_filtering_allowed_url_patterns
    type: Set
    element_type: String
    data_path: [contentFiltering, allowedUrlPatterns]
    exclude_test: true
    description: A list of URL patterns that are allowed
  - model_name: settings
    type: String
    data_path: [contentFiltering, blockedUrlCategories]
    exclude_test: true
    description: How URL categories are applied. Can be `network default`, `append` or `override`.
    example: override
    enum_values: [append, network default, override]
  - model_name: categories
    tf_name: content_filtering_blocked_url_categories
    type: Set
    element_type: String
    data_path: [contentFiltering, blockedUrlCategories]
    exclude_test: true
    description: A list of URL categories to block
    example: meraki:contentFiltering/category/1
  - model_name: settings
    type: String
    data_path: [contentFiltering, blockedUrlPatterns]
    exclude_test: true
    description: How URL patterns are applied. Can be `network default`, `append` or `override`.
    example: append
    enum_values: [append, network default, override]
  - model_name: patterns
    tf_name: content_filtering_blocked_url_patterns
    type: Set
    element_type: String
    data_path: [contentFiltering, blockedUrlPatterns]
    exclude_test: true
    description: A list of URL patterns that are blocked
    example: http://www.example.com
  - model_name: settings
    type: String
    data_path: [firewallAndTrafficShaping]
    description: How firewall and traffic shaping rules are enforced. Can be `network default`, `ignore` or `custom`.
    example: custom
    enum_values: [custom, ignore, network default]
  - model_name: l3FirewallRules
    tf_name: l3_firewall_rules
    type: List
    data_path: [firewallAndTrafficShaping]
    description: An ordered array of the L3 firewall rules
    ordered_list: true
    attributes:
      - model_name: comment
        type: String
        description: Description of the rule (optional)
        example: Allow TCP traffic to subnet with HTTP servers.
      - model_name: destCidr
        type: String
        mandatory: true
        description: Destination IP address (in IP or CIDR notation), a fully-qualified domain name (FQDN, if your network supports it) or `any`.
        example: 192.168.1.0/24
      - model_name: destPort
        type: String
        description: Destination port (integer in the range 1-65535), a port range (e.g. 8080-9090), or `any`
        example: "443"
      - model_name: policy
        type: String
        mandatory: true
        description: '`allow` or `deny` traffic specified by this rule'
        example: allow
      - model_name: protocol
        type: String
        mandatory: true
        description: The type of protocol (must be `tcp`, `udp`, `icmp`, `icmp6` or `any`)
        example: tcp
  - model_name: l7FirewallRules
    tf_name: l7_firewall_rules
    type: List
    data_path: [firewallAndTrafficShaping]
    description: An ordered array of L7 firewall rules
    ordered_list: true
    attributes:
      - model_name: policy
        type: String
        description: The policy applied to matching traffic. Must be `deny`.
        example: deny
        enum_values: [deny]
      - model_name: type
        type: String
        description: Type of the L7 Rule. Must be `application`, `applicationCategory`, `host`, `port` or `ipRange`
        example: host
        enum_values: [application, applicationCategory, host, ipRange, port]
      - model_name: value
        type: String
        description: The `value` of what you want to block. If `type` is `host`, `port` or `ipRange`, `value` must be a string matching either a hostname (e.g. somewhere.com), a port (e.g. 8080), or an IP range (e.g. 192.1.0.0/16). If `type` is `application` or `applicationCategory`, then `value` must be an ID for the application.
        example: google.com
  - model_name: trafficShapingRules
    tf_name: traffic_shaping_rules
    type: List
    data_path: [firewallAndTrafficShaping]
    description: An array of traffic shaping rules. Rules are applied in the order that they are specified in. An empty list (or null) means no rules. Note that you are allowed a maximum of 8 rules.
    ordered_list: true
    attributes:
      - model_name: dscpTagValue
        type: Int64
        description: The DSCP tag applied by your rule. null means `Do not change DSCP tag`. For a list of possible tag values, use the trafficShaping/dscpTaggingOptions endpoint.
        example: "0"
      - model_name: pcpTagValue
        type: Int64
        description: The PCP tag applied by your rule. Can be 0 (lowest priority) through 7 (highest priority). null means `Do not set PCP tag`.
        example: "0"
      - model_name: priority
        type: String
        write_only: true
        description: A string, indicating the priority level for packets bound to your rule. Can be `low`, `normal` or `high`.
        example: normal
      - model_name: settings
        type: String
        data_path: [perClientBandwidthLimits]
        description: How bandwidth limits are applied by your rule. Can be one of `network default`, `ignore` or `custom`.
        example: custom
      - model_name: limitDown
        type: Int64
        data_path: [perClientBandwidthLimits, bandwidthLimits]
        description: The maximum download limit (integer, in Kbps).
        example: "1000000"
      - model_name: limitUp
        type: Int64
        data_path: [perClientBandwidthLimits, bandwidthLimits]
        description: The maximum upload limit (integer, in Kbps).
        example: "1000000"
      - model_name: definitions
        type: List
        mandatory: true
        description: A list of objects describing the definitions of your traffic shaping rule. At least one definition is required.
        attributes:
          - model_name: type
            type: String
            id: true
            mandatory: true
            description: The type of definition. Can be one of `application`, `applicationCategory`, `host`, `port`, `ipRange` or `localNet`.
            example: host
            enum_values: [application, applicationCategory, host, ipRange, localNet, port]
          - model_name: value
            type: String
            id: true
            mandatory: true
            description: If 'type' is `host`, `port`, `ipRange` or `localNet`, then 'value' must be a string, matching either a hostname (e.g. 'somesite.com'), a port (e.g. 8080), or an IP range ('192.1.0.0', '192.1.0.0/16', or '10.1.0.0/16:80'). `localNet` also supports CIDR notation, excluding custom ports. If 'type' is `application` or `applicationCategory`, then 'value' must be an application category or application ID (for a list of IDs for your network, use the trafficShaping/applicationCategories endpoint).
            example: google.com
  - model_name: enabled
    type: Bool
    data_path: [scheduling]
    description: Whether scheduling is enabled (true) or disabled (false). Defaults to false. If true, the schedule objects for each day of the week (monday - sunday) are parsed.
    example: "true"
  - model_name: active
    type: Bool
    data_path: [scheduling, friday]
    description: Whether the schedule is active (true) or inactive (false) during the time specified between `from` and `to`. Defaults to true.
    example: "true"
  - model_name: from
    type: String
    data_path: [scheduling, friday]
    description: The time, from `00:00` to `24:00`. Must be less than the time specified in `to`. Defaults to `00:00`. Only 30 minute increments are allowed.
    example: "09:00"
  - model_name: to
    type: String
    data_path: [scheduling, friday]
    description: The time, from `00:00` to `24:00`. Must be greater than the time specified in `from`. Defaults to `24:00`. Only 30 minute increments are allowed.
    example: "17:00"
  - model_name: active
    type: Bool
    data_path: [scheduling, monday]
    description: Whether the schedule is active (true) or inactive (false) during the time specified between `from` and `to`. Defaults to true.
    example: "true"
  - model_name: from
    type: String
    data_path: [scheduling, monday]
    description: The time, from `00:00` to `24:00`. Must be less than the time specified in `to`. Defaults to `00:00`. Only 30 minute increments are allowed.
    example: "09:00"
  - model_name: to
    type: String
    data_path: [scheduling, monday]
    description: The time, from `00:00` to `24:00`. Must be greater than the time specified in `from`. Defaults to `24:00`. Only 30 minute increments are allowed.
    example: "17:00"
  - model_name: active
    type: Bool
    data_path: [scheduling, saturday]
    description: Whether the schedule is active (true) or inactive (false) during the time specified between `from` and `to`. Defaults to true.
    example: "true"
  - model_name: from
    type: String
    data_path: [scheduling, saturday]
    description: The time, from `00:00` to `24:00`. Must be less than the time specified in `to`. Defaults to `00:00`. Only 30 minute increments are allowed.
    example: "09:00"
  - model_name: to
    type: String
    data_path: [scheduling, saturday]
    description: The time, from `00:00` to `24:00`. Must be greater than the time specified in `from`. Defaults to `24:00`. Only 30 minute increments are allowed.
    example: "17:00"
  - model_name: active
    type: Bool
    data_path: [scheduling, sunday]
    description: Whether the schedule is active (true) or inactive (false) during the time specified between `from` and `to`. Defaults to true.
    example: "true"
  - model_name: from
    type: String
    data_path: [scheduling, sunday]
    description: The time, from `00:00` to `24:00`. Must be less than the time specified in `to`. Defaults to `00:00`. Only 30 minute increments are allowed.
    example: "09:00"
  - model_name: to
    type: String
    data_path: [scheduling, sunday]
    description: The time, from `00:00` to `24:00`. Must be greater than the time specified in `from`. Defaults to `24:00`. Only 30 minute increments are allowed.
    example: "17:00"
  - model_name: active
    type: Bool
    data_path: [scheduling, thursday]
    description: Whether the schedule is active (true) or inactive (false) during the time specified between `from` and `to`. Defaults to true.
    example: "true"
  - model_name: from
    type: String
    data_path: [scheduling, thursday]
    description: The time, from `00:00` to `24:00`. Must be less than the time specified in `to`. Defaults to `00:00`. Only 30 minute increments are allowed.
    example: "09:00"
  - model_name: to
    type: String
    data_path: [scheduling, thursday]
    description: The time, from `00:00` to `24:00`. Must be greater than the time specified in `from`. Defaults to `24:00`. Only 30 minute increments are allowed.
    example: "17:00"
  - model_name: active
    type: Bool
    data_path: [scheduling, tuesday]
    description: Whether the schedule is active (true) or inactive (false) during the time specified between `from` and `to`. Defaults to true.
    example: "true"
  - model_name: from
    type: String
    data_path: [scheduling, tuesday]
    description: The time, from `00:00` to `24:00`. Must be less than the time specified in `to`. Defaults to `00:00`. Only 30 minute increments are allowed.
    example: "09:00"
  - model_name: to
    type: String
    data_path: [scheduling, tuesday]
    description: The time, from `00:00` to `24:00`. Must be greater than the time specified in `from`. Defaults to `24:00`. Only 30 minute increments are allowed.
    example: "17:00"
  - model_name: active
    type: Bool
    data_path: [scheduling, wednesday]
    description: Whether the schedule is active (true) or inactive (false) during the time specified between `from` and `to`. Defaults to true.
    example: "true"
  - model_name: from
    type: String
    data_path: [scheduling, wednesday]
    description: The time, from `00:00` to `24:00`. Must be less than the time specified in `to`. Defaults to `00:00`. Only 30 minute increments are allowed.
    example: "09:00"
  - model_name: to
    type: String
    data_path: [scheduling, wednesday]
    description: The time, from `00:00` to `24:00`. Must be greater than the time specified in `from`. Defaults to `24:00`. Only 30 minute increments are allowed.
    example: "17:00"
  - model_name: settings
    type: String
    data_path: [vlanTagging]
    description: How VLAN tagging is applied. Can be `network default`, `ignore` or `custom`.
    example: custom
    enum_values: [custom, ignore, network default]
  - model_name: vlanId
    type: String
    data_path: [vlanTagging]
    description: The ID of the vlan you want to tag. This only applies if `settings` is set to `custom`.
    example: "1"
  - tf_name: force_delete
    type: Bool
    description: If true, the system deletes the GP even if there are active clients using the GP. After deletion, active clients that were assigned to that Group Policy will be left without any policy applied. Default is false.
    example: "true"
test_prerequisites: |
  data "meraki_organization" "test" {
    name = var.test_org
  }
  resource "meraki_network" "test" {
    organization_id = data.meraki_organization.test.id
    name            = var.test_network
    product_types   = ["switch", "wireless"]
  }
additional_tests:
  - |-
    resource "meraki_network_group_policy" "test" {
      network_id   = meraki_network.test.id
      name         = "No video streaming"
      force_delete = true
    }
  - |-
    resource "meraki_network_group_policy" "test" {
      network_id = meraki_network.test.id
      name       = "No video streaming"
      l7_firewall_rules = [
        {
          policy = "deny"
          type   = "host"
          value  = "google.com"
        },
        {
          policy = "deny"
          type   = "port"
          value  = "9091"
        },
        {
          policy = "deny"
          type   = "ipRange"
          value  = "192.168.0.3/16:80"
        },
        {
          policy = "deny"
          type   = "application"
          value  = "meraki:layer7/application/171"
        },
        {
          policy = "deny"
          type   = "applicationCategory"
          value  = "meraki:layer7/category/17"
        }
      ]
    }
  - |-
    resource "meraki_network_group_policy" "test" {
      network_id = meraki_network.test.id
      name       = "No video streaming"
      traffic_shaping_rules = [
        {
          definitions = [
            {
              type  = "application"
              value = "meraki:layer7/application/171"
            },
            {
              type  = "host"
              value = "google.com"
            },
            {
              type  = "port"
              value = "9091"
            },
            {
              type  = "applicationCategory"
              value = "meraki:layer7/category/27"
            },
            {
              type  = "application"
              value = "meraki:layer7/application/133"
            },
            {
              type  = "ipRange"
              value = "192.168.0.3/16:80"
            },
            {
              type  = "localNet"
              value = "192.168.2.4/16"
            },
            {
              type  = "host"
              value = "test.com"
            }
          ]
        }
      ]
    }
