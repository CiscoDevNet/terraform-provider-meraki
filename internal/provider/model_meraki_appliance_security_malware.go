// Copyright Â© 2024 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"net/url"
	"slices"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-meraki"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types

type ApplianceSecurityMalware struct {
	Id           types.String                           `tfsdk:"id"`
	NetworkId    types.String                           `tfsdk:"network_id"`
	Mode         types.String                           `tfsdk:"mode"`
	AllowedFiles []ApplianceSecurityMalwareAllowedFiles `tfsdk:"allowed_files"`
	AllowedUrls  []ApplianceSecurityMalwareAllowedUrls  `tfsdk:"allowed_urls"`
}

type ApplianceSecurityMalwareAllowedFiles struct {
	Comment types.String `tfsdk:"comment"`
	Sha256  types.String `tfsdk:"sha256"`
}

type ApplianceSecurityMalwareAllowedUrls struct {
	Comment types.String `tfsdk:"comment"`
	Url     types.String `tfsdk:"url"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data ApplianceSecurityMalware) getPath() string {
	return fmt.Sprintf("/networks/%v/appliance/security/malware", url.QueryEscape(data.NetworkId.ValueString()))
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data ApplianceSecurityMalware) toBody(ctx context.Context, state ApplianceSecurityMalware) string {
	body := ""
	if !data.Mode.IsNull() {
		body, _ = sjson.Set(body, "mode", data.Mode.ValueString())
	}
	if len(data.AllowedFiles) > 0 {
		body, _ = sjson.Set(body, "allowedFiles", []interface{}{})
		for _, item := range data.AllowedFiles {
			itemBody := ""
			if !item.Comment.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "comment", item.Comment.ValueString())
			}
			if !item.Sha256.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "sha256", item.Sha256.ValueString())
			}
			body, _ = sjson.SetRaw(body, "allowedFiles.-1", itemBody)
		}
	}
	if len(data.AllowedUrls) > 0 {
		body, _ = sjson.Set(body, "allowedUrls", []interface{}{})
		for _, item := range data.AllowedUrls {
			itemBody := ""
			if !item.Comment.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "comment", item.Comment.ValueString())
			}
			if !item.Url.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "url", item.Url.ValueString())
			}
			body, _ = sjson.SetRaw(body, "allowedUrls.-1", itemBody)
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *ApplianceSecurityMalware) fromBody(ctx context.Context, res meraki.Res) {
	if value := res.Get("mode"); value.Exists() && value.Value() != nil {
		data.Mode = types.StringValue(value.String())
	} else {
		data.Mode = types.StringNull()
	}
	if value := res.Get("allowedFiles"); value.Exists() && value.Value() != nil {
		data.AllowedFiles = make([]ApplianceSecurityMalwareAllowedFiles, 0)
		value.ForEach(func(k, res gjson.Result) bool {
			parent := &data
			data := ApplianceSecurityMalwareAllowedFiles{}
			if value := res.Get("comment"); value.Exists() && value.Value() != nil {
				data.Comment = types.StringValue(value.String())
			} else {
				data.Comment = types.StringNull()
			}
			if value := res.Get("sha256"); value.Exists() && value.Value() != nil {
				data.Sha256 = types.StringValue(value.String())
			} else {
				data.Sha256 = types.StringNull()
			}
			(*parent).AllowedFiles = append((*parent).AllowedFiles, data)
			return true
		})
	}
	if value := res.Get("allowedUrls"); value.Exists() && value.Value() != nil {
		data.AllowedUrls = make([]ApplianceSecurityMalwareAllowedUrls, 0)
		value.ForEach(func(k, res gjson.Result) bool {
			parent := &data
			data := ApplianceSecurityMalwareAllowedUrls{}
			if value := res.Get("comment"); value.Exists() && value.Value() != nil {
				data.Comment = types.StringValue(value.String())
			} else {
				data.Comment = types.StringNull()
			}
			if value := res.Get("url"); value.Exists() && value.Value() != nil {
				data.Url = types.StringValue(value.String())
			} else {
				data.Url = types.StringNull()
			}
			(*parent).AllowedUrls = append((*parent).AllowedUrls, data)
			return true
		})
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyPartial

// fromBodyPartial reads values from a gjson.Result into a tfstate model. It ignores null attributes in order to
// uncouple the provider from the exact values that the backend API might summon to replace nulls. (Such behavior might
// easily change across versions of the backend API.) For List/Set/Map attributes, the func only updates the
// "managed" elements, instead of all elements.
func (data *ApplianceSecurityMalware) fromBodyPartial(ctx context.Context, res meraki.Res) {
	if value := res.Get("mode"); value.Exists() && !data.Mode.IsNull() {
		data.Mode = types.StringValue(value.String())
	} else {
		data.Mode = types.StringNull()
	}
	for i := 0; i < len(data.AllowedFiles); i++ {
		keys := [...]string{"sha256"}
		keyValues := [...]string{data.AllowedFiles[i].Sha256.ValueString()}

		parent := &data
		data := (*parent).AllowedFiles[i]
		parentRes := &res
		var res gjson.Result

		parentRes.Get("allowedFiles").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() != keyValues[ik] {
						found = false
						break
					}
					found = true
				}
				if found {
					res = v
					return false
				}
				return true
			},
		)
		if !res.Exists() {
			tflog.Debug(ctx, fmt.Sprintf("removing AllowedFiles[%d] = %+v",
				i,
				(*parent).AllowedFiles[i],
			))
			(*parent).AllowedFiles = slices.Delete((*parent).AllowedFiles, i, i+1)
			i--

			continue
		}
		if value := res.Get("comment"); value.Exists() && !data.Comment.IsNull() {
			data.Comment = types.StringValue(value.String())
		} else {
			data.Comment = types.StringNull()
		}
		if value := res.Get("sha256"); value.Exists() && !data.Sha256.IsNull() {
			data.Sha256 = types.StringValue(value.String())
		} else {
			data.Sha256 = types.StringNull()
		}
		(*parent).AllowedFiles[i] = data
	}
	for i := 0; i < len(data.AllowedUrls); i++ {
		keys := [...]string{"url"}
		keyValues := [...]string{data.AllowedUrls[i].Url.ValueString()}

		parent := &data
		data := (*parent).AllowedUrls[i]
		parentRes := &res
		var res gjson.Result

		parentRes.Get("allowedUrls").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() != keyValues[ik] {
						found = false
						break
					}
					found = true
				}
				if found {
					res = v
					return false
				}
				return true
			},
		)
		if !res.Exists() {
			tflog.Debug(ctx, fmt.Sprintf("removing AllowedUrls[%d] = %+v",
				i,
				(*parent).AllowedUrls[i],
			))
			(*parent).AllowedUrls = slices.Delete((*parent).AllowedUrls, i, i+1)
			i--

			continue
		}
		if value := res.Get("comment"); value.Exists() && !data.Comment.IsNull() {
			data.Comment = types.StringValue(value.String())
		} else {
			data.Comment = types.StringNull()
		}
		if value := res.Get("url"); value.Exists() && !data.Url.IsNull() {
			data.Url = types.StringValue(value.String())
		} else {
			data.Url = types.StringNull()
		}
		(*parent).AllowedUrls[i] = data
	}
}

// End of section. //template:end fromBodyPartial

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyUnknowns

// fromBodyUnknowns updates the Unknown Computed tfstate values from a JSON.
// Known values are not changed (usual for Computed attributes with UseStateForUnknown or with Default).
func (data *ApplianceSecurityMalware) fromBodyUnknowns(ctx context.Context, res meraki.Res) {
}

// End of section. //template:end fromBodyUnknowns

// Section below is generated&owned by "gen/generator.go". //template:begin toDestroyBody

func (data ApplianceSecurityMalware) toDestroyBody(ctx context.Context) string {
	body := ""
	return body
}

// End of section. //template:end toDestroyBody
