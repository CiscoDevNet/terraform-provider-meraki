# Terraform Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - "v*"

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          # Allow goreleaser to access older tag information.
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: "go.mod"
          cache: true
      
      - name: Extract version and tag name
        id: extract-version
        run: |
          # Get the full tag name that triggered this workflow
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          
          # Get the version (remove 'v' prefix if present)
          VERSION=${TAG_NAME#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag: $TAG_NAME"
          echo "Version: $VERSION"

      - name: Switch to main branch
        run: |
          # Switch to main branch to be able to commit
          git checkout main
          git pull origin main

      - name: Update UserAgent
        run: |
          go run scripts/update-useragent.go ${{ steps.extract-version.outputs.version }}
          
      - name: Verify UserAgent format
        run: |
          echo "Verifying UserAgent format..."
          if grep -q 'c\.UserAgent = "MerakiTerraform/.* Cisco"' internal/provider/provider.go; then
            echo "✅ UserAgent format is correct"
          else
            echo "❌ UserAgent format is incorrect"
            echo "Current UserAgent lines:"
            grep -n "UserAgent" internal/provider/provider.go || echo "No UserAgent found"
            exit 1
          fi

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "✅ Changes detected - UserAgent updated"
            echo "Files changed:"
            git diff --name-only
            echo "Diff content:"
            git diff
          fi

      - name: Commit changes to main and update tag
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Make commit with UserAgent update on main
          git add internal/provider/provider.go
          git commit -m "Update UserAgent to version ${{ steps.extract-version.outputs.version }}"
          
          # Push to main
          git push origin main
          
          # Delete the remote tag first
          git push origin :refs/tags/${{ steps.extract-version.outputs.tag_name }} || true
          
          # Delete the tag locally
          git tag -d ${{ steps.extract-version.outputs.tag_name }} || true
          
          # Recreate the tag pointing to the new commit on main
          git tag ${{ steps.extract-version.outputs.tag_name }}
          
          # Push the updated tag
          git push origin ${{ steps.extract-version.outputs.tag_name }}
          
          echo "✅ UserAgent updated in main and tag ${{ steps.extract-version.outputs.tag_name }} recreated"
      
      - name: Checkout updated tag
        run: |
          # Fetch the updated tag and checkout
          git fetch --tags
          git checkout ${{ steps.extract-version.outputs.tag_name }}
      
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0
        with:
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
